name: Build Android APK

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 180 # Increased timeout further, as the full build process can be very long

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Specify a Python version compatible with Kivy/Buildozer

      - name: Install Buildozer and all Android build dependencies
        # This step installs Buildozer and all necessary system-level tools
        # required for a complete Android SDK/NDK setup and compilation.
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.

          echo "Installing Buildozer..."
          pip install buildozer

          echo "Installing system dependencies for Android build..."
          sudo apt-get update
          # Essential build tools including automake and libtool for autoconf issues
          sudo apt-get install -y git zip unzip openjdk-17-jdk python3-pip autoconf automake libtool pkg-config zlib1g-dev libncurses-dev libffi-dev libssl-dev
          # Specific Cython version often required by Kivy/Buildozer
          pip install --upgrade Cython==0.29.36

          echo "System dependencies and Buildozer installed."

      - name: Ensure buildozer.spec has [buildozer] section and configure
        # This step ensures that a buildozer.spec file exists and is correctly configured.
        # It handles cases where the file might be missing or malformed (e.g., missing [buildozer] section).
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.

          # Check if buildozer.spec is missing OR if it exists but does not contain the [buildozer] section.
          # If either is true, we remove the existing (potentially malformed) file and run 'buildozer init'.
          if [ ! -f buildozer.spec ] || ! grep -q "\[buildozer\]" buildozer.spec; then
            if [ -f buildozer.spec ]; then
              echo "buildozer.spec exists but is missing the [buildozer] section or is malformed. Removing it to re-initialize."
              rm buildozer.spec # Remove the existing file to allow 'buildozer init' to create a new one
            else
              echo "buildozer.spec is missing. Running 'buildozer init' to create it."
            fi
            buildozer init # Initialize a fresh buildozer.spec with default sections
            echo "buildozer.spec initialized."
          else
            echo "buildozer.spec found and contains [buildozer] section. Proceeding with configuration."
          fi

          echo "Applying configurations to buildozer.spec..."
          # Set Android API levels to a stable version (e.g., 33)
          sed -i '/^android\.api =/c\android.api = 33' buildozer.spec
          sed -i '/^android\.minapi =/c\android.minapi = 21' buildozer.spec
          sed -i '/^android\.targetsdk =/c\android.targetsdk = 33' buildozer.spec
          sed -i '/^android\.sdk =/d' buildozer.spec || true # Remove android.sdk if present

          # Explicitly set Android NDK version to a known stable one for API 33
          sed -i '/^#android\.ndk =/c\android.ndk = 25b' buildozer.spec || true # Add or update NDK version
          # If android.ndk is already present but commented out or different, ensure it's 25b

          # Ensure all Python requirements are listed
          sed -i 's/^#requirements = python3,kivy$/requirements = python3,kivy,flask,numpy,requests,face_recognition,Pillow/' buildozer.spec
          # Ensure necessary Android permissions are set
          sed -i 's/^#android\.permissions =/android.permissions = INTERNET,CAMERA,READ_EXTERNAL_STORAGE,WRITE_EXTERNAL_STORAGE/' buildozer.spec
          # Set main.py entry point
          sed -i 's/^#main\.py = main\.py$/main.py = main.py/' buildozer.spec
          # Set package name and domain (customize these in your actual buildozer.spec file)
          sed -i 's/^#package\.name = org\.test\.myapp$/package.name = com.yourcompany.faceappattendance/' buildozer.spec
          sed -i 's/^#package\.domain = org\.test$/package.domain = yourcompany.com/' buildozer.spec

          echo "Final buildozer.spec content after configuration:"
          cat buildozer.spec # Print the updated spec for verification in logs

      - name: Accept Android SDK Licenses
        # This step is crucial for Buildozer to download and use Android SDK components.
        # It automatically accepts the licenses for all necessary SDK packages.
        run: |
          set -e
          echo "Accepting Android SDK licenses..."
          yes | buildozer android update # 'yes' command automatically inputs 'y' for prompts
          echo "Android SDK licenses accepted."

      - name: Clean previous Buildozer build artifacts
        # Clean the build directory to ensure a fresh build and avoid cached issues.
        run: |
          set -e
          echo "Cleaning Buildozer build artifacts..."
          buildozer android clean
          echo "Buildozer clean completed."

      - name: Build Android Debug APK
        # This command triggers the full Buildozer build process.
        # It will download Android SDK/NDK, compile Python, and create the APK.
        # This is the step that takes the most time.
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.
          echo "Starting Buildozer Android debug build..."
          buildozer android debug
          echo "Buildozer Android debug build completed."

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4 # Action to upload the generated APK as a workflow artifact
        with:
          name: android-apk # The name of the artifact
          path: bin/*.apk # Buildozer places the compiled APK files in the 'bin' directory
          retention-days: 7 # How long to keep the artifact (optional)

      - name: Notify on success (Optional)
        if: success() # This step runs only if the previous steps were successful
        run: echo "Android APK build successful! Check the 'Artifacts' section of this workflow run for the APK."

      - name: Notify on failure (Optional)
        if: failure() # This step runs only if any previous step failed
        run: echo "Android APK build failed. Please review the workflow logs for errors."
