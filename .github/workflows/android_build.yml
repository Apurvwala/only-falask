# .github/workflows/android_build.yml
name: Build Android APK with Buildozer

on:
  push:
    branches:
      - main # Trigger the workflow whenever code is pushed to the 'main' branch
  workflow_dispatch: # Allows you to manually trigger the workflow from the GitHub Actions tab

jobs:
  build_android_apk:
    runs-on: ubuntu-latest # Specifies that this job will run on a fresh Ubuntu Linux virtual machine

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Action to check out your repository code into the runner

      - name: Set up Python
        uses: actions/setup-python@v5 # Action to set up a specific Python version
        with:
          python-version: '3.9' # Kivy and Buildozer often work well with Python 3.9

      - name: Install Buildozer and dependencies
        run: |
          # Install Buildozer Python package
          pip install buildozer
          # Update apt-get and install system-level dependencies required by Buildozer
          # These include Java Development Kit (JDK), Git, Zip, Unzip, etc.
          sudo apt-get update
          sudo apt-get install -y git zip unzip openjdk-17-jdk python3-pip autoconf libtool pkg-config zlib1g-dev libncurses-dev libffi-dev libssl-dev
          # Install a specific version of Cython, as Kivy/Buildozer can be sensitive to it
          pip install --upgrade Cython==0.29.36

      - name: Verify buildozer.spec exists
        # This step checks if your 'buildozer.spec' file is present in the repository.
        # It's crucial for Buildozer to know how to build your app.
        run: |
          if [ ! -f buildozer.spec ]; then
            echo "Error: buildozer.spec not found in the repository root. Please create and commit it."
            exit 1
          fi
          echo "buildozer.spec found. Proceeding with build."

      - name: Build Android Debug APK
        # This is the core Buildozer command to create the Android APK.
        # 'android debug' target builds a debuggable APK. For a release version, you'd use 'android release'.
        # The first time this runs, it will download Android SDK, NDK, and other tools, which can take a long time (10-30 minutes).
        # Subsequent builds are usually faster.
        run: |
          buildozer android debug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4 # Action to upload the generated APK as a workflow artifact
        with:
          name: android-apk # The name of the artifact
          path: bin/*.apk # Buildozer places the compiled APK files in the 'bin' directory
          retention-days: 7 # How long to keep the artifact (optional)

      - name: Notify on success (Optional)
        if: success() # This step runs only if the previous steps were successful
        run: echo "Android APK build successful! Check the 'Artifacts' section of this workflow run for the APK."

      - name: Notify on failure (Optional)
        if: failure() # This step runs only if any previous step failed
        run: echo "Android APK build failed. Please review the workflow logs for errors."
